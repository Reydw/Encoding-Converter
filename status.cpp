#include "status.h"
#include "ui_status.h"

int condition           [96] = {0xa0, 0xa1, 0xa2, 0xa3, 0xa4, 0xa5, 0xa6, 0xa7, 0xa8, 0xa9, 0xaa, 0xab, 0xac, 0xad, 0xae, 0xaf, 0xb0, 0xb1, 0xb2, 0xb3, 0xb4, 0xb5, 0xb6, 0xb7, 0xb8, 0xb9, 0xba, 0xbb, 0xbc, 0xbd, 0xbe, 0xbf, 0xc0, 0xc1, 0xc2, 0xc3, 0xc4, 0xc5, 0xc6, 0xc7, 0xc8, 0xc9, 0xca, 0xcb, 0xcc, 0xcd, 0xce, 0xcf, 0xd0, 0xd1, 0xd2, 0xd3, 0xd4, 0xd5, 0xd6, 0xd7, 0xd8, 0xd9, 0xda, 0xdb, 0xdc, 0xdd, 0xde, 0xdf, 0xe0, 0xe1, 0xe2, 0xe3, 0xe4, 0xe5, 0xe6, 0xe7, 0xe8, 0xe9, 0xea, 0xeb, 0xec, 0xed, 0xee, 0xef, 0xf0, 0xf1, 0xf2, 0xf3, 0xf4, 0xf5, 0xf6, 0xf7, 0xf8, 0xf9, 0xfa, 0xfb, 0xfc, 0xfd, 0xfe, 0xff};
int firstByte           [96] = {0xc2, 0xc4, 0xcb, 0xc5, 0xc2, 0xc4, 0xc5, 0xc2, 0xc2, 0xc5, 0xc5, 0xc5, 0xc5, 0xc2, 0xc5, 0xc5, 0xc2, 0xc4, 0xcb, 0xc5, 0xc2, 0xc4, 0xc5, 0xcb, 0xc2, 0xc5, 0xc5, 0xc5, 0xc5, 0xcb, 0xc5, 0xc5, 0xc5, 0xc3, 0xc3, 0xc4, 0xc3, 0xc4, 0xc4, 0xc3, 0xc4, 0xc3, 0xc4, 0xc3, 0xc4, 0xc3, 0xc3, 0xc4, 0xc4, 0xc5, 0xc5, 0xc3, 0xc3, 0xc5, 0xc3, 0xc3, 0xc5, 0xc5, 0xc3, 0xc5, 0xc3, 0xc3, 0xc5, 0xc3, 0xc5, 0xc3, 0xc3, 0xc4, 0xc3, 0xc4, 0xc4, 0xc3, 0xc4, 0xc3, 0xc4, 0xc3, 0xc4, 0xc3, 0xc3, 0xc4, 0xc4, 0xc5, 0xc5, 0xc3, 0xc3, 0xc5, 0xc3, 0xc3, 0xc5, 0xc5, 0xc3, 0xc5, 0xc3, 0xc3, 0xc5, 0xcb};
int secondByte          [96] = {0xa0, 0x84, 0x98, 0x81, 0xa4, 0xbd, 0x9a, 0xa7, 0xa8, 0xa0, 0x9e, 0xa4, 0xb9, 0xad, 0xbd, 0xbb, 0xb0, 0x85, 0x9b, 0x82, 0xb4, 0xbe, 0x9b, 0x87, 0xb8, 0xa1, 0x9f, 0xa5, 0xba, 0x9d, 0xbe, 0xbc, 0x94, 0x81, 0x82, 0x82, 0x84, 0xb9, 0x86, 0x87, 0x8c, 0x89, 0x98, 0x8b, 0x9a, 0x8d, 0x8e, 0x8e, 0x90, 0x83, 0x87, 0x93, 0x94, 0x90, 0x96, 0x97, 0x98, 0xae, 0x9a, 0xb0, 0x9c, 0x9d, 0xa2, 0x9f, 0x95, 0xa1, 0xa2, 0x83, 0xa4, 0xba, 0x87, 0xa7, 0x8d, 0xa9, 0x99, 0xab, 0x9b, 0xad, 0xae, 0x8f, 0x91, 0x84, 0x88, 0xb3, 0xb4, 0x91, 0xb6, 0xb7, 0x99, 0xaf, 0xba, 0xb1, 0xbc, 0xbd, 0xa3, 0x99};
//replacing s cedilla with s comma and t cedilla with t comma, for romanian
int firstByte_corrected [96] = {0xc2, 0xc4, 0xcb, 0xc5, 0xc2, 0xc4, 0xc5, 0xc2, 0xc2, 0xc5, 0xc8, 0xc5, 0xc5, 0xc2, 0xc5, 0xc5, 0xc2, 0xc4, 0xcb, 0xc5, 0xc2, 0xc4, 0xc5, 0xcb, 0xc2, 0xc5, 0xc8, 0xc5, 0xc5, 0xcb, 0xc5, 0xc5, 0xc5, 0xc3, 0xc3, 0xc4, 0xc3, 0xc4, 0xc4, 0xc3, 0xc4, 0xc3, 0xc4, 0xc3, 0xc4, 0xc3, 0xc3, 0xc4, 0xc4, 0xc5, 0xc5, 0xc3, 0xc3, 0xc5, 0xc3, 0xc3, 0xc5, 0xc5, 0xc3, 0xc5, 0xc3, 0xc3, 0xc8, 0xc3, 0xc5, 0xc3, 0xc3, 0xc4, 0xc3, 0xc4, 0xc4, 0xc3, 0xc4, 0xc3, 0xc4, 0xc3, 0xc4, 0xc3, 0xc3, 0xc4, 0xc4, 0xc5, 0xc5, 0xc3, 0xc3, 0xc5, 0xc3, 0xc3, 0xc5, 0xc5, 0xc3, 0xc5, 0xc3, 0xc3, 0xc8, 0xcb};
int secondByte_corrected[96] = {0xa0, 0x84, 0x98, 0x81, 0xa4, 0xbd, 0x9a, 0xa7, 0xa8, 0xa0, 0x98, 0xa4, 0xb9, 0xad, 0xbd, 0xbb, 0xb0, 0x85, 0x9b, 0x82, 0xb4, 0xbe, 0x9b, 0x87, 0xb8, 0xa1, 0x99, 0xa5, 0xba, 0x9d, 0xbe, 0xbc, 0x94, 0x81, 0x82, 0x82, 0x84, 0xb9, 0x86, 0x87, 0x8c, 0x89, 0x98, 0x8b, 0x9a, 0x8d, 0x8e, 0x8e, 0x90, 0x83, 0x87, 0x93, 0x94, 0x90, 0x96, 0x97, 0x98, 0xae, 0x9a, 0xb0, 0x9c, 0x9d, 0x9a, 0x9f, 0x95, 0xa1, 0xa2, 0x83, 0xa4, 0xba, 0x87, 0xa7, 0x8d, 0xa9, 0x99, 0xab, 0x9b, 0xad, 0xae, 0x8f, 0x91, 0x84, 0x88, 0xb3, 0xb4, 0x91, 0xb6, 0xb7, 0x99, 0xaf, 0xba, 0xb1, 0xbc, 0xbd, 0x9b, 0x99};

Status::Status(QWidget *parent) : QDialog(parent), ui(new Ui::Status)
{
    ui->setupUi(this);
}

void Status::on_btn_ok_clicked()
{
    ui->btn_ok->setEnabled(false);
    this->hide();
}

void Status::convert(QStringList inputFiles) {
    if(inputFiles.isEmpty()) {
        ui->label->setText("Nothing to convert");
        ui->btn_ok->setEnabled(true);
        return;
    }
    ui->label->setText("Converting...");

    QString caption = "Select output directory";
    QString defaultDir = QDir::homePath();
    QFileDialog::Options options = QFileDialog::ShowDirsOnly | QFileDialog::DontResolveSymlinks;

    QString outputDir = (QFileDialog::getExistingDirectory(this, caption, defaultDir, options)).append("/");

    int numberOfFiles = inputFiles.length();
    char buffer;
    for(int i=0;i<numberOfFiles;i++) {
        QFile inputFile(inputFiles.at(i));
        QString outputFileName = QFileInfo(inputFile).fileName();
        QFile newFile(outputDir+outputFileName);

        inputFile.open(QIODevice::ReadOnly);
        newFile.open(QIODevice::WriteOnly);
        ui->label_2->setText(outputFileName);

        QDataStream input(&inputFile);
        QDataStream output(&newFile);

        while(input.readRawData(&buffer, 1)) {
            if((unsigned char)buffer > 0x9f)
                for(int j=0;j<96;j++)
                    if((unsigned char)buffer == condition[j]) {
                        buffer = firstByte_corrected[j];
                        output.writeRawData(&buffer, 1);
                        buffer = secondByte_corrected[j];
                        break;
                    }
                output.writeRawData(&buffer, 1);
        }
        inputFile.close();
        newFile.close();
    }

    ui->label->setText("Convertion Complete");
    ui->label_2->setText("");
    ui->btn_ok->setEnabled(true);
    doneConverting();
}

Status::~Status(){delete ui;}
