#include "encodings.h"

/* REF:
 * #1: Latin 3 has less characters so it has to skip a few.
 * #2: One latin 3 char converted to utf-8 has only one byte so it has to skip writing the first one.
*/

int condition                   [96] = {0xa0, 0xa1, 0xa2, 0xa3, 0xa4, 0xa5, 0xa6, 0xa7, 0xa8, 0xa9, 0xaa, 0xab, 0xac, 0xad, 0xae, 0xaf, 0xb0, 0xb1, 0xb2, 0xb3, 0xb4, 0xb5, 0xb6, 0xb7, 0xb8, 0xb9, 0xba, 0xbb, 0xbc, 0xbd, 0xbe, 0xbf, 0xc0, 0xc1, 0xc2, 0xc3, 0xc4, 0xc5, 0xc6, 0xc7, 0xc8, 0xc9, 0xca, 0xcb, 0xcc, 0xcd, 0xce, 0xcf, 0xd0, 0xd1, 0xd2, 0xd3, 0xd4, 0xd5, 0xd6, 0xd7, 0xd8, 0xd9, 0xda, 0xdb, 0xdc, 0xdd, 0xde, 0xdf, 0xe0, 0xe1, 0xe2, 0xe3, 0xe4, 0xe5, 0xe6, 0xe7, 0xe8, 0xe9, 0xea, 0xeb, 0xec, 0xed, 0xee, 0xef, 0xf0, 0xf1, 0xf2, 0xf3, 0xf4, 0xf5, 0xf6, 0xf7, 0xf8, 0xf9, 0xfa, 0xfb, 0xfc, 0xfd, 0xfe, 0xff};

//replacing s cedilla with s comma and t cedilla with t comma, romanian corrected
int firstByte_latin2_corrected  [96] = {0xc2, 0xc4, 0xcb, 0xc5, 0xc2, 0xc4, 0xc5, 0xc2, 0xc2, 0xc5, 0xc8, 0xc5, 0xc5, 0xc2, 0xc5, 0xc5, 0xc2, 0xc4, 0xcb, 0xc5, 0xc2, 0xc4, 0xc5, 0xcb, 0xc2, 0xc5, 0xc8, 0xc5, 0xc5, 0xcb, 0xc5, 0xc5, 0xc5, 0xc3, 0xc3, 0xc4, 0xc3, 0xc4, 0xc4, 0xc3, 0xc4, 0xc3, 0xc4, 0xc3, 0xc4, 0xc3, 0xc3, 0xc4, 0xc4, 0xc5, 0xc5, 0xc3, 0xc3, 0xc5, 0xc3, 0xc3, 0xc5, 0xc5, 0xc3, 0xc5, 0xc3, 0xc3, 0xc8, 0xc3, 0xc5, 0xc3, 0xc3, 0xc4, 0xc3, 0xc4, 0xc4, 0xc3, 0xc4, 0xc3, 0xc4, 0xc3, 0xc4, 0xc3, 0xc3, 0xc4, 0xc4, 0xc5, 0xc5, 0xc3, 0xc3, 0xc5, 0xc3, 0xc3, 0xc5, 0xc5, 0xc3, 0xc5, 0xc3, 0xc3, 0xc8, 0xcb};
int secondByte_latin2_corrected [96] = {0xa0, 0x84, 0x98, 0x81, 0xa4, 0xbd, 0x9a, 0xa7, 0xa8, 0xa0, 0x98, 0xa4, 0xb9, 0xad, 0xbd, 0xbb, 0xb0, 0x85, 0x9b, 0x82, 0xb4, 0xbe, 0x9b, 0x87, 0xb8, 0xa1, 0x99, 0xa5, 0xba, 0x9d, 0xbe, 0xbc, 0x94, 0x81, 0x82, 0x82, 0x84, 0xb9, 0x86, 0x87, 0x8c, 0x89, 0x98, 0x8b, 0x9a, 0x8d, 0x8e, 0x8e, 0x90, 0x83, 0x87, 0x93, 0x94, 0x90, 0x96, 0x97, 0x98, 0xae, 0x9a, 0xb0, 0x9c, 0x9d, 0x9a, 0x9f, 0x95, 0xa1, 0xa2, 0x83, 0xa4, 0xba, 0x87, 0xa7, 0x8d, 0xa9, 0x99, 0xab, 0x9b, 0xad, 0xae, 0x8f, 0x91, 0x84, 0x88, 0xb3, 0xb4, 0x91, 0xb6, 0xb7, 0x99, 0xaf, 0xba, 0xb1, 0xbc, 0xbd, 0x9b, 0x99};

int latin_to_utf8[4][2][96] = {
    {/* LATIN 1 -> UTF-8 */
        {0xc2, 0xc2, 0xc2, 0xc2, 0xc2, 0xc2, 0xc2, 0xc2, 0xc2, 0xc2, 0xc2, 0xc2, 0xc2, 0xc2, 0xc2, 0xc2, 0xc2, 0xc2, 0xc2, 0xc2, 0xc2, 0xc2, 0xc2, 0xc2, 0xc2, 0xc2, 0xc2, 0xc2, 0xc2, 0xc2, 0xc2, 0xc2, 0xc3, 0xc3, 0xc3, 0xc3, 0xc3, 0xc3, 0xc3, 0xc3, 0xc3, 0xc3, 0xc3, 0xc3, 0xc3, 0xc3, 0xc3, 0xc3, 0xc3, 0xc3, 0xc3, 0xc3, 0xc3, 0xc3, 0xc3, 0xc3, 0xc3, 0xc3, 0xc3, 0xc3, 0xc3, 0xc3, 0xc3, 0xc3, 0xc3, 0xc3, 0xc3, 0xc3, 0xc3, 0xc3, 0xc3, 0xc3, 0xc3, 0xc3, 0xc3, 0xc3, 0xc3, 0xc3, 0xc3, 0xc3, 0xc3, 0xc3, 0xc3, 0xc3, 0xc3, 0xc3, 0xc3, 0xc3, 0xc3, 0xc3, 0xc3, 0xc3, 0xc3, 0xc3, 0xc3, 0xc3},
        {0xa0, 0xa1, 0xa2, 0xa3, 0xa4, 0xa5, 0xa6, 0xa7, 0xa8, 0xa9, 0xaa, 0xab, 0xac, 0xad, 0xae, 0xaf, 0xb0, 0xb1, 0xb2, 0xb3, 0xb4, 0xb5, 0xb6, 0xb7, 0xb8, 0xb9, 0xba, 0xbb, 0xbc, 0xbd, 0xbe, 0xbf, 0x80, 0x81, 0x82, 0x83, 0x84, 0x85, 0x86, 0x87, 0x88, 0x89, 0x8a, 0x8b, 0x8c, 0x8d, 0x8e, 0x8f, 0x90, 0x91, 0x92, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9a, 0x9b, 0x9c, 0x9d, 0x9e, 0x9f, 0xa0, 0xa1, 0xa2, 0xa3, 0xa4, 0xa5, 0xa6, 0xa7, 0xa8, 0xa9, 0xaa, 0xab, 0xac, 0xad, 0xae, 0xaf, 0xb0, 0xb1, 0xb2, 0xb3, 0xb4, 0xb5, 0xb6, 0xb7, 0xb8, 0xb9, 0xba, 0xbb, 0xbc, 0xbd, 0xbe, 0xbf}
    },
    {/* LATIN 2 -> UTF-8 */
        {0xc2, 0xc4, 0xcb, 0xc5, 0xc2, 0xc4, 0xc5, 0xc2, 0xc2, 0xc5, 0xc5, 0xc5, 0xc5, 0xc2, 0xc5, 0xc5, 0xc2, 0xc4, 0xcb, 0xc5, 0xc2, 0xc4, 0xc5, 0xcb, 0xc2, 0xc5, 0xc5, 0xc5, 0xc5, 0xcb, 0xc5, 0xc5, 0xc5, 0xc3, 0xc3, 0xc4, 0xc3, 0xc4, 0xc4, 0xc3, 0xc4, 0xc3, 0xc4, 0xc3, 0xc4, 0xc3, 0xc3, 0xc4, 0xc4, 0xc5, 0xc5, 0xc3, 0xc3, 0xc5, 0xc3, 0xc3, 0xc5, 0xc5, 0xc3, 0xc5, 0xc3, 0xc3, 0xc5, 0xc3, 0xc5, 0xc3, 0xc3, 0xc4, 0xc3, 0xc4, 0xc4, 0xc3, 0xc4, 0xc3, 0xc4, 0xc3, 0xc4, 0xc3, 0xc3, 0xc4, 0xc4, 0xc5, 0xc5, 0xc3, 0xc3, 0xc5, 0xc3, 0xc3, 0xc5, 0xc5, 0xc3, 0xc5, 0xc3, 0xc3, 0xc5, 0xcb},
        {0xa0, 0x84, 0x98, 0x81, 0xa4, 0xbd, 0x9a, 0xa7, 0xa8, 0xa0, 0x9e, 0xa4, 0xb9, 0xad, 0xbd, 0xbb, 0xb0, 0x85, 0x9b, 0x82, 0xb4, 0xbe, 0x9b, 0x87, 0xb8, 0xa1, 0x9f, 0xa5, 0xba, 0x9d, 0xbe, 0xbc, 0x94, 0x81, 0x82, 0x82, 0x84, 0xb9, 0x86, 0x87, 0x8c, 0x89, 0x98, 0x8b, 0x9a, 0x8d, 0x8e, 0x8e, 0x90, 0x83, 0x87, 0x93, 0x94, 0x90, 0x96, 0x97, 0x98, 0xae, 0x9a, 0xb0, 0x9c, 0x9d, 0xa2, 0x9f, 0x95, 0xa1, 0xa2, 0x83, 0xa4, 0xba, 0x87, 0xa7, 0x8d, 0xa9, 0x99, 0xab, 0x9b, 0xad, 0xae, 0x8f, 0x91, 0x84, 0x88, 0xb3, 0xb4, 0x91, 0xb6, 0xb7, 0x99, 0xaf, 0xba, 0xb1, 0xbc, 0xbd, 0xa3, 0x99}
    },
    {/* LATIN 3 -> UTF-8 */
        {0xc2, 0xc4, 0xcb, 0xc2, 0xc2, 0xc4, 0xc2, 0xcc, 0xc4, 0xc5, 0xc4, 0xc4, 0xc2, 0xc5, 0xc2, 0xc4, 0xc2, 0xc2, 0xc2, 0xc2, 0xc4, 0xc2, 0xc2, 0x00, 0xc5, 0xc4, 0xc4, 0xc2, 0xc5, 0xc3, 0xc3, 0xc3, 0xc3, 0xc4, 0xc4, 0xc3, 0xc3, 0xc3, 0xc3, 0xc3, 0xc3, 0xc3, 0xc3, 0xc3, 0xc3, 0xc3, 0xc3, 0xc3, 0xc4, 0xc3, 0xc3, 0xc4, 0xc3, 0xc3, 0xc3, 0xc3, 0xc5, 0xc5, 0xc3, 0xc3, 0xc3, 0xc3, 0xc3, 0xc4, 0xc4, 0xc3, 0xc3, 0xc3, 0xc3, 0xc3, 0xc3, 0xc3, 0xc3, 0xc3, 0xc3, 0xc3, 0xc3, 0xc3, 0xc4, 0xc3, 0xc3, 0xc4, 0xc3, 0xc3, 0xc3, 0xc3, 0xc5, 0xc5, 0xcb},
        {0xa0, 0xa6, 0x98, 0xa3, 0xa4, 0xa4, 0xa7, 0x88, 0xb0, 0x9e, 0x9e, 0xb4, 0xad, 0xbb, 0xb0, 0xa7, 0xb2, 0xb3, 0xb4, 0xb5, 0xa5, 0xb7, 0xb8, 0x69, 0x9f, 0x9f, 0xb5, 0xbd, 0xbc, 0x80, 0x81, 0x82, 0x84, 0x8a, 0x88, 0x87, 0x88, 0x89, 0x8a, 0x8b, 0x8c, 0x8d, 0x8e, 0x8f, 0x91, 0x92, 0x93, 0x94, 0xa0, 0x96, 0x97, 0x8c, 0x99, 0x9a, 0x9b, 0x9c, 0xac, 0x9c, 0x9f, 0xa0, 0xa1, 0xa2, 0xa4, 0x8b, 0x89, 0xa7, 0xa8, 0xa9, 0xaa, 0xab, 0xac, 0xad, 0xae, 0xaf, 0xb1, 0xb2, 0xb3, 0xb4, 0xa1, 0xb6, 0xb7, 0x9d, 0xb9, 0xba, 0xbb, 0xbc, 0xad, 0x9d, 0x99}
    },
    {/* LATIN 4 -> UTF-8 */
        {0xc2, 0xc4, 0xc4, 0xc5, 0xc2, 0xc4, 0xc4, 0xc2, 0xc2, 0xc5, 0xc4, 0xc4, 0xc5, 0xc2, 0xc2, 0xc2, 0xc2, 0xc4, 0xcb, 0xc5, 0xc2, 0xc4, 0xc4, 0xcb, 0xc2, 0xc5, 0xc4, 0xc4, 0xc5, 0xc5, 0xc5, 0xc5, 0xc4, 0xc3, 0xc3, 0xc3, 0xc3, 0xc3, 0xc3, 0xc4, 0xc4, 0xc3, 0xc4, 0xc3, 0xc4, 0xc3, 0xc3, 0xc4, 0xc4, 0xc5, 0xc5, 0xc4, 0xc3, 0xc3, 0xc3, 0xc3, 0xc3, 0xc5, 0xc3, 0xc3, 0xc3, 0xc5, 0xc5, 0xc3, 0xc4, 0xc3, 0xc3, 0xc3, 0xc3, 0xc3, 0xc3, 0xc4, 0xc4, 0xc3, 0xc4, 0xc3, 0xc4, 0xc3, 0xc3, 0xc4, 0xc4, 0xc5, 0xc5, 0xc4, 0xc3, 0xc3, 0xc3, 0xc3, 0xc3, 0xc5, 0xc3, 0xc3, 0xc3, 0xc5, 0xc5, 0xcb},
        {0xa0, 0x84, 0xb8, 0x96, 0xa4, 0xa8, 0xbb, 0xa7, 0xa8, 0xa0, 0x92, 0xa2, 0xa6, 0xad, 0xbd, 0xaf, 0xb0, 0x85, 0x9b, 0x97, 0xb4, 0xa9, 0xbc, 0x87, 0xb8, 0xa1, 0x93, 0xa3, 0xa7, 0x8a, 0xbe, 0x8b, 0x80, 0x81, 0x82, 0x83, 0x84, 0x85, 0x86, 0xae, 0x8c, 0x89, 0x98, 0x8b, 0x96, 0x8d, 0x8e, 0xaa, 0x90, 0x85, 0x8c, 0xb6, 0x94, 0x95, 0x96, 0x97, 0x98, 0xb2, 0x9a, 0x9b, 0x9c, 0xa8, 0xaa, 0x9f, 0x81, 0xa1, 0xa2, 0xa3, 0xa4, 0xa5, 0xa6, 0xaf, 0x8d, 0xa9, 0x99, 0xab, 0x97, 0xad, 0xae, 0xab, 0x91, 0x86, 0x8d, 0xb7, 0xb4, 0xb5, 0xb6, 0xb7, 0xb8, 0xb3, 0xba, 0xbb, 0xbc, 0xa9, 0xab, 0x99}
    }
};

Encodings::Encodings(QDataStream* output)
{
    this->output = output;
}

void Encodings::universalEncoding(char buffer, int source, int destination)
{
    /* LATIN -> UTF-8 */
    if(destination == 0)
    if((unsigned char)buffer > 0x9f)
        for(int i=0;i<96;i++)
            if((unsigned char)buffer == condition[i]) {
                if(source == 3 && (i ==  5 || i == 14 || i == 30 || i == 35 || i == 48 || i == 67 || i == 80))continue; // REF #1
                buffer = latin_to_utf8[source-1][0][i];
                if(!(source == 3 && i == 23)) // REF #2
                    output->writeRawData(&buffer, 1);
                buffer = latin_to_utf8[source-1][1][i];
                break;
            }
    output->writeRawData(&buffer, 1);
    /* TEMPLATE */
    /*
    if((unsigned char)buffer > 0x9f)
        for(int i=0;i<96;i++)
            if((unsigned char)buffer == condition[i]) {
                buffer = firstByte_corrected[i];
                output->writeRawData(&buffer, 1);
                buffer = secondByte_corrected[i];
                break;
            }
    output->writeRawData(&buffer, 1);
    */
    /* TEMPLATE */
}
